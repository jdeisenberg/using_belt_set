[{"href": "./index.html", "title": "Home", "contents": "You can use your own variant data types in sets by:", "rendered": "You can use your own variant data types in sets by:", "breadcrumb": "Home"},
{"href": "./index.html#Conclusion", "title": "Conclusion", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "module ColourComparator =\n  Belt.Id.MakeComparable(\n    {\n      type t = colour;\n      let cmp = compare;\n    },\n  );\n\nmodule Set = Belt.Set;\n\nlet cset1 = Set.fromArray([|White, Red, Hex(255, 255, 0), Named(\"lime\")|],\n  ~id = (module ColourComparator));\nlet cset2 = Set.fromArray([|Green, Red, Hex(0, 128,0)|],\n  ~id = (module ColourComparator));\nlet cset3 = Set.add(cset2, Named(\"lime\"));\nJs.log(Set.toArray(Set.intersect(cset1, cset3)));\nJs.log(Set.diff(cset1, cset3) |> Set.toArray); /* easier notation */", "rendered": "<pre><code>module ColourComparator =\n  Belt.Id.MakeComparable(\n    {\n      type t = colour;\n      let cmp = compare;\n    },\n  );\n\nmodule Set = Belt.Set;\n\nlet cset1 = Set.fromArray([|White, Red, Hex(255, 255, 0), Named(\"lime\")|],\n  ~id = (module ColourComparator));\nlet cset2 = Set.fromArray([|Green, Red, Hex(0, 128,0)|],\n  ~id = (module ColourComparator));\nlet cset3 = Set.add(cset2, Named(\"lime\"));\nJs.log(Set.toArray(Set.intersect(cset1, cset3)));\nJs.log(Set.diff(cset1, cset3) |> Set.toArray); /* easier notation */</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "So, the comparator function for a set of colour can use the built-in compare and achieve acceptable results:", "rendered": "So, the comparator function for a set of <code>colour</code> can use the built-in <code>compare</code> and achieve acceptable results:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "Js.log(compare(Red, Blue));\nJs.log(compare(White, Hex(255, 0, 0)));\nJs.log(compare(Hex(15, 20, 45), Hex(15, 20, 30)));\nJs.log(compare(Hex(15, 20, 45), Hex(10, 20, 45)));\nJs.log(compare(Named(\"aqua\"), Hex(128, 0, 255)));\nJs.log(compare(Named(\"beige\"), Named(\"peach\")));", "rendered": "<pre><code>Js.log(compare(Red, Blue));\nJs.log(compare(White, Hex(255, 0, 0)));\nJs.log(compare(Hex(15, 20, 45), Hex(15, 20, 30)));\nJs.log(compare(Hex(15, 20, 45), Hex(10, 20, 45)));\nJs.log(compare(Named(\"aqua\"), Hex(128, 0, 255)));\nJs.log(compare(Named(\"beige\"), Named(\"peach\")));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Can you make a Belt.Set of colour? Yes, you can. (Do you think I would be writing all of this just to tell you\nthat it can’t be done?) And, in fact, you don’t have to go to much extra effort, because it turns out that the\nbuilt-in compare function works like magic on these variants as well:", "rendered": "Can you make a <code>Belt.Set</code> of <code>colour</code>? Yes, you can. (Do you think I would be writing all of this just to tell you\nthat it can’t be done?) And, in fact, you don’t have to go to much extra effort, because it turns out that the\nbuilt-in <code>compare</code> function works like magic on these variants as well:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "type colour = \n  | Red\n  | Green\n  | Blue\n  | White\n  | Black\n  | Hex (int, int, int)\n  | Named (string);", "rendered": "<pre><code>type colour = \n  | Red\n  | Green\n  | Blue\n  | White\n  | Black\n  | Hex (int, int, int)\n  | Named (string);</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "type colour = \n  | Red\n  | Green\n  | Blue\n  | White\n  | Black\n  | Hex (int, int, int)\n  | Named (string);", "rendered": "<pre><code>type colour = \n  | Red\n  | Green\n  | Blue\n  | White\n  | Black\n  | Hex (int, int, int)\n  | Named (string);</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "That’s great for simple variants, but what about a data type like this:", "rendered": "That’s great for simple variants, but what about a data type like this:", "breadcrumb": "Home"},
{"href": "./index.html#Variants-With-Constructors", "title": "Variants With Constructors", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "type fraction = (int, int);\nlet s1 = Belt.Set.fromArray([| (5, 10), (3, 4), (5, 6), (6, 12) |],\n  ~id=(module FracComparator));\nlet s2 = Belt.Set.fromArray([| (6, 8), (7, 12), (1, 3), (1, 2) |],\n  ~id=(module FracComparator));\n  \nlet both1 = Belt.Set.intersect(s1, s2);\nlet both2 = Belt.Set.intersect(s2, s1);\n\nJs.log(Belt.Set.toArray(both1));\nJs.log(Belt.Set.toArray(both2));", "rendered": "<pre><code>type fraction = (int, int);\nlet s1 = Belt.Set.fromArray([| (5, 10), (3, 4), (5, 6), (6, 12) |],\n  ~id=(module FracComparator));\nlet s2 = Belt.Set.fromArray([| (6, 8), (7, 12), (1, 3), (1, 2) |],\n  ~id=(module FracComparator));\n  \nlet both1 = Belt.Set.intersect(s1, s2);\nlet both2 = Belt.Set.intersect(s2, s1);\n\nJs.log(Belt.Set.toArray(both1));\nJs.log(Belt.Set.toArray(both2));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Hint: to compare fractions a/b and c/d, compare a × d to c × b. For example, to compare 5/7 to 3/8, you would compare 5 × 8 to 3 × 7. Since 40 is greater than 20, that means 5/7 is greater than 3/8.", "rendered": "Hint: to compare fractions <em>a</em>/<em>b</em> and <em>c</em>/<em>d</em>, compare <em>a</em> × <em>d</em> to <em>c</em> × <em>b</em>. For example, to compare 5/7 to 3/8, you would compare 5 × 8 to 3 × 7. Since 40 is greater than 20, that means 5/7 is greater than 3/8.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Given a type that represents a fraction as a pair of integers,\nwrite a comparator named FracComparator that lets you construct sets of fractions.\nYour comparator should make sure that equivalent fractions like (3, 4) and (9, 12) are treated the same. This\nchallenge’s data type does not use variants, but if you write a comparator properly, it will work great.", "rendered": "Given a type that represents a fraction as a pair of integers,\nwrite a comparator named <code>FracComparator</code> that lets you construct sets of fractions.\nYour comparator should make sure that equivalent fractions like <code>(3, 4)</code> and <code>(9, 12)</code> are treated the same. This\nchallenge’s data type does not use variants, but if you write a comparator properly, it will work great.", "breadcrumb": "Home"},
{"href": "./index.html#Challenge-2", "title": "Challenge 2", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "then VPA203 would show up twice in the list of occupied rooms. You might want to write a different version of the code that uses a set of string to make sure the occupied room list doesn’t have duplicates.", "rendered": "then <code>VPA203</code> would show up twice in the list of occupied rooms. You might want to write a different version of the code that uses a set of <code>string</code> to make sure the occupied room list doesn’t have duplicates.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "{subject: \"Video Editing\", room: \"VPA203\", days: [| M, T |]}", "rendered": "<pre><code>{subject: \"Video Editing\", room: \"VPA203\", days: [| M, T |]}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The code you have seen here is a good example of an example. In a real school, a room might be used for several different courses. If you had added this entry to the courses array:", "rendered": "The code you have seen here is a good example of an example. In a real school, a room might be used for several different courses. If you had added this entry to the <code>courses</code> array:", "breadcrumb": "Home"},
{"href": "./index.html#Challenge-1", "title": "Challenge 1", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Belt.Array.keepMap then applies the function to each item in the array, returning a new array consisting only of retained items.", "rendered": "<code>Belt.Array.keepMap</code> then applies the function to each item in the array, returning a new array consisting only of retained items.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A quick explanation of Belt.Array.keepMap is in order here. This function takes two arguments:", "rendered": "A quick explanation of <code>Belt.Array.keepMap</code> is in order here. This function takes two arguments:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "module Set = Belt.Set; /* an alias to save typing */\nlet requestedSet =\n  Set.fromArray(requested, ~id=(module DayComparator));\n\nlet rooms = Belt.Array.keepMap(courses, item => {\n  let daySet = Set.fromArray(item.days, ~id=(module DayComparator));\n  if (Set.isEmpty(Set.intersect(daySet, requestedSet))) {\n    None;\n  } else {\n    Some(item.room);\n  }\n});\nJs.log(rooms);", "rendered": "<pre><code>module Set = Belt.Set; /* an alias to save typing */\nlet requestedSet =\n  Set.fromArray(requested, ~id=(module DayComparator));\n\nlet rooms = Belt.Array.keepMap(courses, item => {\n  let daySet = Set.fromArray(item.days, ~id=(module DayComparator));\n  if (Set.isEmpty(Set.intersect(daySet, requestedSet))) {\n    None;\n  } else {\n    Some(item.room);\n  }\n});\nJs.log(rooms);</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "That now lets you write the following code to do the task of finding the empty rooms.", "rendered": "That now lets you write the following code to do the task of finding the empty rooms.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "(The output from the preceding example shows the numeric values assigned to the variants; ReasonML uses the names during compile time, not during run time.)", "rendered": "(The output from the preceding example shows the numeric values assigned to the variants; ReasonML uses the names during compile time, not during run time.)", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let requestedSet =\n  Belt.Set.fromArray(requested, ~id=(module DayComparator));\nJs.log(Belt.Set.toArray(requestedSet));", "rendered": "<pre><code>let requestedSet =\n  Belt.Set.fromArray(requested, ~id=(module DayComparator));\nJs.log(Belt.Set.toArray(requestedSet));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "When creating a set of weekdays from an array, you need to specify the comparator to use:", "rendered": "When creating a set of <code>weekday</code>s from an array, you need to specify the comparator to use:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "module DayComparator =\n  Belt.Id.MakeComparable(\n    {\n      type t = weekday;\n      let cmp = compare;\n    },\n  );", "rendered": "<pre><code>module DayComparator =\n  Belt.Id.MakeComparable(\n    {\n      type t = weekday;\n      let cmp = compare;\n    },\n  );</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Here is the code for comparing days of the week:", "rendered": "Here is the code for comparing days of the week:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "To tell Belt.Set how to compare a custom type, you create a module that includes a call to Belt.Id.MakeComparable that specifies:", "rendered": "To tell <code>Belt.Set</code> how to compare a custom type, you create a module that includes a call to <code>Belt.Id.MakeComparable</code> that specifies:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "Js.log(compare(3, 5));\nJs.log(compare(3, 3));\nJs.log(compare(5, 3));\n\nJs.log(compare(M, W));\nJs.log(compare(W, W));\nJs.log(compare(F, W));", "rendered": "<pre><code>Js.log(compare(3, 5));\nJs.log(compare(3, 3));\nJs.log(compare(5, 3));\n\nJs.log(compare(M, W));\nJs.log(compare(W, W));\nJs.log(compare(F, W));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "In the example of the courses, you need sets of weekday, which aren’t integers, strings, or dictionaries. In order to create these sets, you have to tell the main Belt.Set module how to compare days of the week. The first question is: can you even compare variant data types? Yes, you can, with ReasonML’s compare function. This function takes two arguments and returns -1 if the first argument is less than the second, 0 if the arguments are equal, and 1 if the first argument is greater than the second:", "rendered": "In the example of the courses, you need sets of <code>weekday</code>, which aren’t integers, strings, or dictionaries. In order to create these sets, you have to tell the main <code>Belt.Set</code> module how to compare days of the week. The first question is: can you even compare variant data types? Yes, you can, with ReasonML’s <code>compare</code> function. This function takes two arguments and returns <code>-1</code> if the first argument is less than the second, <code>0</code> if the arguments are equal, and <code>1</code> if the first argument is greater than the second:", "breadcrumb": "Home"},
{"href": "./index.html#Customized-Sets", "title": "Customized Sets", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "You almost never need to know the internal form of a set; as in the preceding example you will usually build a set fromArray and convert it back toArray when you finish set operations.", "rendered": "You almost never need to know the internal form of a set; as in the preceding example you will usually build a set <code>fromArray</code> and convert it back <code>toArray</code> when you finish set operations.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let items = Belt.Set.Int.fromArray([|3, 5, 2, 5, 4, 6, 2|]);\nlet odds = Belt.Set.Int.fromArray([|1, 3, 5, 7|]);\nlet union = Belt.Set.Int.union(items, odds);\nlet both = Belt.Set.Int.intersect(items, odds);\nlet diff = Belt.Set.Int.diff(items, odds);\n\nJs.log2(\"Union:\", Belt.Set.Int.toArray(union));\nJs.log2(\"Intersection:\", Belt.Set.Int.toArray(both));\nJs.log2(\"Difference:\", Belt.Set.Int.toArray(diff));\nJs.log2(\"Union empty?:\", Belt.Set.Int.isEmpty(union));", "rendered": "<pre><code>let items = Belt.Set.Int.fromArray([|3, 5, 2, 5, 4, 6, 2|]);\nlet odds = Belt.Set.Int.fromArray([|1, 3, 5, 7|]);\nlet union = Belt.Set.Int.union(items, odds);\nlet both = Belt.Set.Int.intersect(items, odds);\nlet diff = Belt.Set.Int.diff(items, odds);\n\nJs.log2(\"Union:\", Belt.Set.Int.toArray(union));\nJs.log2(\"Intersection:\", Belt.Set.Int.toArray(both));\nJs.log2(\"Difference:\", Belt.Set.Int.toArray(diff));\nJs.log2(\"Union empty?:\", Belt.Set.Int.isEmpty(union));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "For integers, strings, and dictionaries, Belt provides specialized modules: Belt.SetInt, Belt.SetString, and Belt.SetDict. Here is an example of using Belt.SetInt.", "rendered": "For integers, strings, and dictionaries, <code>Belt</code> provides specialized modules: <code>Belt.SetInt</code>, <code>Belt.SetString</code>, and <code>Belt.SetDict</code>. Here is an example of using <code>Belt.SetInt</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The new Belt library has a Belt.Set module, which implements sorted, immutable sets. That is, the items in the set are stored in sorted order, and all set functions create a new set; the original is never changed (immutable).", "rendered": "The new <code>Belt</code> library has a <code>Belt.Set</code> module, which implements sorted, immutable sets. That is, the items in the set are stored in sorted order, and all set functions create a new set; the original is never changed (immutable).", "breadcrumb": "Home"},
{"href": "./index.html#Sets-in-ReasonML", "title": "Sets in ReasonML", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "...you might want to write code that will find rooms that are in use on any of the requested days. This is a perfect case\nfor using sets. If the intersection of a course’s days and the requested days is not empty, then\nthe course’s room is occupied.", "rendered": "...you might want to write code that will find rooms that are in use on any of the requested days. This is a perfect case\nfor using <em>set</em>s. If the intersection of a course’s <code>days</code> and the <code>requested</code> days is not empty, then\nthe course’s <code>room</code> is occupied.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let courses = [|\n  {subject: \"Math\", room: \"C101\", days: [| M, W |]},\n  {subject: \"Art\", room: \"VPA203\", days: [| T, Th |]},\n  {subject: \"Psychology\", room: \"A5-212\", days: [|M, Th, F |]},\n|];\n\nlet requested = [|T, W|];", "rendered": "<pre><code>let courses = [|\n  {subject: \"Math\", room: \"C101\", days: [| M, W |]},\n  {subject: \"Art\", room: \"VPA203\", days: [| T, Th |]},\n  {subject: \"Psychology\", room: \"A5-212\", days: [|M, Th, F |]},\n|];\n\nlet requested = [|T, W|];</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Given an array of courses and a set of requested days...", "rendered": "Given an array of courses and a set of requested days...", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "type weekday =\n  | M\n  | T\n  | W\n  | Th\n  | F;\n  \n  \ntype course = {\n  subject: string,\n  room: string,\n  days: array(weekday)\n};", "rendered": "<pre><code>type weekday =\n  | M\n  | T\n  | W\n  | Th\n  | F;\n  \n  \ntype course = {\n  subject: string,\n  room: string,\n  days: array(weekday)\n};</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "type weekday =\n  | M\n  | T\n  | W\n  | Th\n  | F;\n  \ntype course = {\n  subject: string,\n  room: string,\n  days: array(weekday)\n};\nlet courses = [|\n  {subject: \"Math\", room: \"C101\", days: [| M, W |]},\n  {subject: \"Art\", room: \"VPA203\", days: [| T, Th |]},\n  {subject: \"Psychology\", room: \"A5-212\", days: [|M, Th, F |]},\n|];\n\nlet requested = [|T, W|];\n\n", "rendered": "<pre><code>type weekday =\n  | M\n  | T\n  | W\n  | Th\n  | F;\n  \ntype course = {\n  subject: string,\n  room: string,\n  days: array(weekday)\n};\nlet courses = [|\n  {subject: \"Math\", room: \"C101\", days: [| M, W |]},\n  {subject: \"Art\", room: \"VPA203\", days: [| T, Th |]},\n  {subject: \"Psychology\", room: \"A5-212\", days: [|M, Th, F |]},\n|];\n\nlet requested = [|T, W|];\n\n</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Consider a data type that gives the work days of the week, used in a data type that specifies a\ncourse in a school:", "rendered": "Consider a data type that gives the work days of the week, used in a data type that specifies a\ncourse in a school:", "breadcrumb": "Home"},
{"href": "./index.html#Using-Belt.Set-with-Variant-Data-Types", "title": "Using Belt.Set with Variant Data Types", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset3", "title": "cset3", "contents": "cset3 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset3 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset2", "title": "cset2", "contents": "cset2 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset2 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset1", "title": "cset1", "contents": "cset1 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset1 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#type-colour", "title": "colour", "contents": "colour int int int string", "rendered": "<h4 class='item'>type colour = \n    | Red\n    | Green\n    | Blue\n    | White\n    | Black\n    | Hex(int, int, int)\n    | Named(string)\n</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html", "title": "ColourExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html", "title": "ColourExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#ColourExample-Usingbeltset", "title": "ColourExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-both2", "title": "both2", "contents": "both2 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let both2 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-both1", "title": "both1", "contents": "both1 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let both1 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-s2", "title": "s2", "contents": "s2 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let s2 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-s1", "title": "s1", "contents": "s1 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let s1 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#type-fraction", "title": "fraction", "contents": "fraction int int", "rendered": "<h4 class='item'>type fraction = (int, int)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html", "title": "Fraction-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html", "title": "Fraction-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#Fraction-Usingbeltset", "title": "Fraction-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-rooms", "title": "rooms", "contents": "rooms array string", "rendered": "<h4 class='item'>let rooms = array(string)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-requestedSet", "title": "requestedSet", "contents": "requestedSet Belt Set t DayComparator t identity", "rendered": "<h4 class='item'>let requestedSet = Belt.Set.t(<a href=\"./api/WeekdayExample-Usingbeltset.html#module-DayComparator\">DayComparator</a>.<a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.t\">t</a>, <a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.identity\" title=\"DayComparator.identity\">identity</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-requested", "title": "requested", "contents": "requested array DayComparator t", "rendered": "<h4 class='item'>let requested = array(<a href=\"./api/WeekdayExample-Usingbeltset.html#module-DayComparator\">DayComparator</a>.<a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.t\">t</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-courses", "title": "courses", "contents": "courses array course", "rendered": "<h4 class='item'>let courses = array(<a href=\"./api/WeekdayExample-Usingbeltset.html#type-course\">course</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#type-course", "title": "course", "contents": "course subject string room string days array weekday", "rendered": "<h4 class='item'>type course = {\n    subject: string,\n    room: string,\n    days: array(<a href=\"./api/WeekdayExample-Usingbeltset.html#type-weekday\">weekday</a>)\n}</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#type-weekday", "title": "weekday", "contents": "weekday ", "rendered": "<h4 class='item'>type weekday = | M | T | W | Th | F\n</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html", "title": "WeekdayExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html", "title": "WeekdayExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#WeekdayExample-Usingbeltset", "title": "WeekdayExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-diff", "title": "diff", "contents": "diff Belt Set Int t", "rendered": "<h4 class='item'>let diff = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-both", "title": "both", "contents": "both Belt Set Int t", "rendered": "<h4 class='item'>let both = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-union", "title": "union", "contents": "union Belt Set Int t", "rendered": "<h4 class='item'>let union = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-odds", "title": "odds", "contents": "odds Belt Set Int t", "rendered": "<h4 class='item'>let odds = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-items", "title": "items", "contents": "items Belt Set Int t", "rendered": "<h4 class='item'>let items = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html", "title": "IntSetExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html", "title": "IntSetExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#IntSetExample-Usingbeltset", "title": "IntSetExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset3", "title": "cset3", "contents": "cset3 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset3 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset2", "title": "cset2", "contents": "cset2 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset2 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#value-cset1", "title": "cset1", "contents": "cset1 Set t ColourComparator t identity", "rendered": "<h4 class='item'>let cset1 = <a href=\"./api/ColourExample-Usingbeltset.html#module-Set\">Set</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-Set.t\">t</a>(<a href=\"./api/ColourExample-Usingbeltset.html#module-ColourComparator\">ColourComparator</a>.<a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.t\">t</a>, <a href=\"./api/ColourExample-Usingbeltset.html#type-ColourComparator.identity\" title=\"ColourComparator.identity\">identity</a>)</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#type-colour", "title": "colour", "contents": "colour int int int string", "rendered": "<h4 class='item'>type colour = \n    | Red\n    | Green\n    | Blue\n    | White\n    | Black\n    | Hex(int, int, int)\n    | Named(string)\n</h4>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html", "title": "ColourExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html", "title": "ColourExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/ColourExample-Usingbeltset.html#ColourExample-Usingbeltset", "title": "ColourExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "ColourExample-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-both2", "title": "both2", "contents": "both2 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let both2 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-both1", "title": "both1", "contents": "both1 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let both1 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-s2", "title": "s2", "contents": "s2 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let s2 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#value-s1", "title": "s1", "contents": "s1 Belt Set t FracComparator t identity", "rendered": "<h4 class='item'>let s1 = Belt.Set.t(<a href=\"./api/Fraction-Usingbeltset.html#module-FracComparator\">FracComparator</a>.<a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.t\">t</a>, <a href=\"./api/Fraction-Usingbeltset.html#type-FracComparator.identity\" title=\"FracComparator.identity\">identity</a>)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#type-fraction", "title": "fraction", "contents": "fraction int int", "rendered": "<h4 class='item'>type fraction = (int, int)</h4>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html", "title": "Fraction-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html", "title": "Fraction-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/Fraction-Usingbeltset.html#Fraction-Usingbeltset", "title": "Fraction-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "Fraction-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-rooms", "title": "rooms", "contents": "rooms array string", "rendered": "<h4 class='item'>let rooms = array(string)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-requestedSet", "title": "requestedSet", "contents": "requestedSet Belt Set t DayComparator t identity", "rendered": "<h4 class='item'>let requestedSet = Belt.Set.t(<a href=\"./api/WeekdayExample-Usingbeltset.html#module-DayComparator\">DayComparator</a>.<a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.t\">t</a>, <a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.identity\" title=\"DayComparator.identity\">identity</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-requested", "title": "requested", "contents": "requested array DayComparator t", "rendered": "<h4 class='item'>let requested = array(<a href=\"./api/WeekdayExample-Usingbeltset.html#module-DayComparator\">DayComparator</a>.<a href=\"./api/WeekdayExample-Usingbeltset.html#type-DayComparator.t\">t</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#value-courses", "title": "courses", "contents": "courses array course", "rendered": "<h4 class='item'>let courses = array(<a href=\"./api/WeekdayExample-Usingbeltset.html#type-course\">course</a>)</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#type-course", "title": "course", "contents": "course subject string room string days array weekday", "rendered": "<h4 class='item'>type course = {\n    subject: string,\n    room: string,\n    days: array(<a href=\"./api/WeekdayExample-Usingbeltset.html#type-weekday\">weekday</a>)\n}</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#type-weekday", "title": "weekday", "contents": "weekday ", "rendered": "<h4 class='item'>type weekday = | M | T | W | Th | F\n</h4>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html", "title": "WeekdayExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html", "title": "WeekdayExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/WeekdayExample-Usingbeltset.html#WeekdayExample-Usingbeltset", "title": "WeekdayExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "WeekdayExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-diff", "title": "diff", "contents": "diff Belt Set Int t", "rendered": "<h4 class='item'>let diff = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-both", "title": "both", "contents": "both Belt Set Int t", "rendered": "<h4 class='item'>let both = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-union", "title": "union", "contents": "union Belt Set Int t", "rendered": "<h4 class='item'>let union = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-odds", "title": "odds", "contents": "odds Belt Set Int t", "rendered": "<h4 class='item'>let odds = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#value-items", "title": "items", "contents": "items Belt Set Int t", "rendered": "<h4 class='item'>let items = Belt.Set.Int.t</h4>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html", "title": "IntSetExample-Usingbeltset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html", "title": "IntSetExample-Usingbeltset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "IntSetExample-Usingbeltset"},
{"href": "./api/IntSetExample-Usingbeltset.html#IntSetExample-Usingbeltset", "title": "IntSetExample-Usingbeltset", "contents": "", "rendered": "", "breadcrumb": "IntSetExample-Usingbeltset"}]